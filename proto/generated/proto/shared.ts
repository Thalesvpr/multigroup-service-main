// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.1
// source: proto/shared.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

/** Mensagem para dados de sucesso */
export interface SuccessData {
  /** Personalize com campos relevantes */
  data: string;
}

/** Subestrutura para erro de campo */
export interface Field {
  /** Campo que gerou o erro */
  field: string;
  /** Mensagem de erro */
  message: string;
}

/** Mensagem para erros em campos específicos */
export interface FieldError {
  /** Lista de erros de campo */
  errors: Field[];
}

/** Mensagem para dados de erro */
export interface ErrorData {
}

/** Mensagem Response para sucesso */
export interface GoodData {
  data: SuccessData | undefined;
}

/** Mensagem BadResponse para erro */
export interface BadData {
  message?: string | undefined;
  fieldError?: FieldError | undefined;
}

/** Alternativa com oneof para múltiplos tipos de dados em uma resposta */
export interface GenericResultResponse {
  successData?: SuccessData | undefined;
  errorData?: ErrorData | undefined;
}

function createBaseSuccessData(): SuccessData {
  return { data: "" };
}

export const SuccessData = {
  encode(message: SuccessData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SuccessData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuccessData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuccessData {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: SuccessData): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuccessData>, I>>(base?: I): SuccessData {
    return SuccessData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuccessData>, I>>(object: I): SuccessData {
    const message = createBaseSuccessData();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseField(): Field {
  return { field: "", message: "" };
}

export const Field = {
  encode(message: Field, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Field {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: Field): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Field>, I>>(base?: I): Field {
    return Field.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Field>, I>>(object: I): Field {
    const message = createBaseField();
    message.field = object.field ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseFieldError(): FieldError {
  return { errors: [] };
}

export const FieldError = {
  encode(message: FieldError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.errors) {
      Field.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FieldError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(Field.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldError {
    return { errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Field.fromJSON(e)) : [] };
  },

  toJSON(message: FieldError): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Field.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FieldError>, I>>(base?: I): FieldError {
    return FieldError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FieldError>, I>>(object: I): FieldError {
    const message = createBaseFieldError();
    message.errors = object.errors?.map((e) => Field.fromPartial(e)) || [];
    return message;
  },
};

function createBaseErrorData(): ErrorData {
  return {};
}

export const ErrorData = {
  encode(_: ErrorData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ErrorData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ErrorData {
    return {};
  },

  toJSON(_: ErrorData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorData>, I>>(base?: I): ErrorData {
    return ErrorData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorData>, I>>(_: I): ErrorData {
    const message = createBaseErrorData();
    return message;
  },
};

function createBaseGoodData(): GoodData {
  return { data: undefined };
}

export const GoodData = {
  encode(message: GoodData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      SuccessData.encode(message.data, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GoodData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoodData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = SuccessData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoodData {
    return { data: isSet(object.data) ? SuccessData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GoodData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SuccessData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GoodData>, I>>(base?: I): GoodData {
    return GoodData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GoodData>, I>>(object: I): GoodData {
    const message = createBaseGoodData();
    message.data = (object.data !== undefined && object.data !== null)
      ? SuccessData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBadData(): BadData {
  return { message: undefined, fieldError: undefined };
}

export const BadData = {
  encode(message: BadData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== undefined) {
      writer.uint32(10).string(message.message);
    }
    if (message.fieldError !== undefined) {
      FieldError.encode(message.fieldError, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BadData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldError = FieldError.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadData {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      fieldError: isSet(object.fieldError) ? FieldError.fromJSON(object.fieldError) : undefined,
    };
  },

  toJSON(message: BadData): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.fieldError !== undefined) {
      obj.fieldError = FieldError.toJSON(message.fieldError);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadData>, I>>(base?: I): BadData {
    return BadData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadData>, I>>(object: I): BadData {
    const message = createBaseBadData();
    message.message = object.message ?? undefined;
    message.fieldError = (object.fieldError !== undefined && object.fieldError !== null)
      ? FieldError.fromPartial(object.fieldError)
      : undefined;
    return message;
  },
};

function createBaseGenericResultResponse(): GenericResultResponse {
  return { successData: undefined, errorData: undefined };
}

export const GenericResultResponse = {
  encode(message: GenericResultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.successData !== undefined) {
      SuccessData.encode(message.successData, writer.uint32(18).fork()).ldelim();
    }
    if (message.errorData !== undefined) {
      ErrorData.encode(message.errorData, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenericResultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.successData = SuccessData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errorData = ErrorData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericResultResponse {
    return {
      successData: isSet(object.successData) ? SuccessData.fromJSON(object.successData) : undefined,
      errorData: isSet(object.errorData) ? ErrorData.fromJSON(object.errorData) : undefined,
    };
  },

  toJSON(message: GenericResultResponse): unknown {
    const obj: any = {};
    if (message.successData !== undefined) {
      obj.successData = SuccessData.toJSON(message.successData);
    }
    if (message.errorData !== undefined) {
      obj.errorData = ErrorData.toJSON(message.errorData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenericResultResponse>, I>>(base?: I): GenericResultResponse {
    return GenericResultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenericResultResponse>, I>>(object: I): GenericResultResponse {
    const message = createBaseGenericResultResponse();
    message.successData = (object.successData !== undefined && object.successData !== null)
      ? SuccessData.fromPartial(object.successData)
      : undefined;
    message.errorData = (object.errorData !== undefined && object.errorData !== null)
      ? ErrorData.fromPartial(object.errorData)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
