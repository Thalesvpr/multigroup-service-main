// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v5.27.1
// source: proto/auth.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Empty } from "../google/protobuf/empty";

export const protobufPackage = "auth_service";

/** Mensagem para dados de sucesso */
export interface SuccessData {
  /** Personalize com campos relevantes */
  data: string;
}

/** Subestrutura para erro de campo */
export interface Field {
  /** Campo que gerou o erro */
  field: string;
  /** Mensagem de erro */
  message: string;
}

/** Mensagem para erros em campos específicos */
export interface FieldError {
  /** Lista de erros de campo */
  errors: Field[];
}

/** Mensagem para dados de erro */
export interface ErrorData {
}

/** Mensagem Response para sucesso */
export interface GoodData {
  data: SuccessData | undefined;
}

/** Mensagem BadResponse para erro */
export interface BadData {
  message?: string | undefined;
  fieldError?: FieldError | undefined;
}

/** Alternativa com oneof para múltiplos tipos de dados em uma resposta */
export interface GenericResultResponse {
  successData?: SuccessData | undefined;
  errorData?: ErrorData | undefined;
}

/** Mensagem para AuthPayload */
export interface SignInPayload {
  email: string;
  password: string;
}

/** Mensagem para SignUpPayload */
export interface SignUpPayload {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  phoneNumber: string;
  address: string;
  formService: string;
}

export interface AuthData {
  accessToken: string;
  refreshToken: string;
  expiresIn: number;
  publicId: string;
}

export interface HealthStatus {
  status: number;
}

/** Resposta usando oneof para tipos múltiplos de resposta */
export interface AuthResponse {
  data?: AuthData | undefined;
  error?: BadData | undefined;
}

function createBaseSuccessData(): SuccessData {
  return { data: "" };
}

export const SuccessData = {
  encode(message: SuccessData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SuccessData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSuccessData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SuccessData {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: SuccessData): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SuccessData>, I>>(base?: I): SuccessData {
    return SuccessData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SuccessData>, I>>(object: I): SuccessData {
    const message = createBaseSuccessData();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseField(): Field {
  return { field: "", message: "" };
}

export const Field = {
  encode(message: Field, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.field !== "") {
      writer.uint32(10).string(message.field);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Field {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.field = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field {
    return {
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: Field): unknown {
    const obj: any = {};
    if (message.field !== "") {
      obj.field = message.field;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Field>, I>>(base?: I): Field {
    return Field.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Field>, I>>(object: I): Field {
    const message = createBaseField();
    message.field = object.field ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseFieldError(): FieldError {
  return { errors: [] };
}

export const FieldError = {
  encode(message: FieldError, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.errors) {
      Field.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FieldError {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.errors.push(Field.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FieldError {
    return { errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => Field.fromJSON(e)) : [] };
  },

  toJSON(message: FieldError): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors.map((e) => Field.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FieldError>, I>>(base?: I): FieldError {
    return FieldError.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FieldError>, I>>(object: I): FieldError {
    const message = createBaseFieldError();
    message.errors = object.errors?.map((e) => Field.fromPartial(e)) || [];
    return message;
  },
};

function createBaseErrorData(): ErrorData {
  return {};
}

export const ErrorData = {
  encode(_: ErrorData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ErrorData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseErrorData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ErrorData {
    return {};
  },

  toJSON(_: ErrorData): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ErrorData>, I>>(base?: I): ErrorData {
    return ErrorData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ErrorData>, I>>(_: I): ErrorData {
    const message = createBaseErrorData();
    return message;
  },
};

function createBaseGoodData(): GoodData {
  return { data: undefined };
}

export const GoodData = {
  encode(message: GoodData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      SuccessData.encode(message.data, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GoodData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGoodData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = SuccessData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GoodData {
    return { data: isSet(object.data) ? SuccessData.fromJSON(object.data) : undefined };
  },

  toJSON(message: GoodData): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = SuccessData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GoodData>, I>>(base?: I): GoodData {
    return GoodData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GoodData>, I>>(object: I): GoodData {
    const message = createBaseGoodData();
    message.data = (object.data !== undefined && object.data !== null)
      ? SuccessData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseBadData(): BadData {
  return { message: undefined, fieldError: undefined };
}

export const BadData = {
  encode(message: BadData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== undefined) {
      writer.uint32(10).string(message.message);
    }
    if (message.fieldError !== undefined) {
      FieldError.encode(message.fieldError, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BadData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBadData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fieldError = FieldError.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BadData {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : undefined,
      fieldError: isSet(object.fieldError) ? FieldError.fromJSON(object.fieldError) : undefined,
    };
  },

  toJSON(message: BadData): unknown {
    const obj: any = {};
    if (message.message !== undefined) {
      obj.message = message.message;
    }
    if (message.fieldError !== undefined) {
      obj.fieldError = FieldError.toJSON(message.fieldError);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BadData>, I>>(base?: I): BadData {
    return BadData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BadData>, I>>(object: I): BadData {
    const message = createBaseBadData();
    message.message = object.message ?? undefined;
    message.fieldError = (object.fieldError !== undefined && object.fieldError !== null)
      ? FieldError.fromPartial(object.fieldError)
      : undefined;
    return message;
  },
};

function createBaseGenericResultResponse(): GenericResultResponse {
  return { successData: undefined, errorData: undefined };
}

export const GenericResultResponse = {
  encode(message: GenericResultResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.successData !== undefined) {
      SuccessData.encode(message.successData, writer.uint32(18).fork()).ldelim();
    }
    if (message.errorData !== undefined) {
      ErrorData.encode(message.errorData, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GenericResultResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenericResultResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.successData = SuccessData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.errorData = ErrorData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenericResultResponse {
    return {
      successData: isSet(object.successData) ? SuccessData.fromJSON(object.successData) : undefined,
      errorData: isSet(object.errorData) ? ErrorData.fromJSON(object.errorData) : undefined,
    };
  },

  toJSON(message: GenericResultResponse): unknown {
    const obj: any = {};
    if (message.successData !== undefined) {
      obj.successData = SuccessData.toJSON(message.successData);
    }
    if (message.errorData !== undefined) {
      obj.errorData = ErrorData.toJSON(message.errorData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenericResultResponse>, I>>(base?: I): GenericResultResponse {
    return GenericResultResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenericResultResponse>, I>>(object: I): GenericResultResponse {
    const message = createBaseGenericResultResponse();
    message.successData = (object.successData !== undefined && object.successData !== null)
      ? SuccessData.fromPartial(object.successData)
      : undefined;
    message.errorData = (object.errorData !== undefined && object.errorData !== null)
      ? ErrorData.fromPartial(object.errorData)
      : undefined;
    return message;
  },
};

function createBaseSignInPayload(): SignInPayload {
  return { email: "", password: "" };
}

export const SignInPayload = {
  encode(message: SignInPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignInPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignInPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignInPayload {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: SignInPayload): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignInPayload>, I>>(base?: I): SignInPayload {
    return SignInPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignInPayload>, I>>(object: I): SignInPayload {
    const message = createBaseSignInPayload();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSignUpPayload(): SignUpPayload {
  return { email: "", password: "", firstName: "", lastName: "", phoneNumber: "", address: "", formService: "" };
}

export const SignUpPayload = {
  encode(message: SignUpPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.firstName !== "") {
      writer.uint32(26).string(message.firstName);
    }
    if (message.lastName !== "") {
      writer.uint32(34).string(message.lastName);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(42).string(message.phoneNumber);
    }
    if (message.address !== "") {
      writer.uint32(50).string(message.address);
    }
    if (message.formService !== "") {
      writer.uint32(58).string(message.formService);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SignUpPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.firstName = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.address = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.formService = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignUpPayload {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      firstName: isSet(object.firstName) ? globalThis.String(object.firstName) : "",
      lastName: isSet(object.lastName) ? globalThis.String(object.lastName) : "",
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      formService: isSet(object.formService) ? globalThis.String(object.formService) : "",
    };
  },

  toJSON(message: SignUpPayload): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.firstName !== "") {
      obj.firstName = message.firstName;
    }
    if (message.lastName !== "") {
      obj.lastName = message.lastName;
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.formService !== "") {
      obj.formService = message.formService;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignUpPayload>, I>>(base?: I): SignUpPayload {
    return SignUpPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignUpPayload>, I>>(object: I): SignUpPayload {
    const message = createBaseSignUpPayload();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.firstName = object.firstName ?? "";
    message.lastName = object.lastName ?? "";
    message.phoneNumber = object.phoneNumber ?? "";
    message.address = object.address ?? "";
    message.formService = object.formService ?? "";
    return message;
  },
};

function createBaseAuthData(): AuthData {
  return { accessToken: "", refreshToken: "", expiresIn: 0, publicId: "" };
}

export const AuthData = {
  encode(message: AuthData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    if (message.expiresIn !== 0) {
      writer.uint32(24).int32(message.expiresIn);
    }
    if (message.publicId !== "") {
      writer.uint32(34).string(message.publicId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.expiresIn = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.publicId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthData {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
      expiresIn: isSet(object.expiresIn) ? globalThis.Number(object.expiresIn) : 0,
      publicId: isSet(object.publicId) ? globalThis.String(object.publicId) : "",
    };
  },

  toJSON(message: AuthData): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    if (message.expiresIn !== 0) {
      obj.expiresIn = Math.round(message.expiresIn);
    }
    if (message.publicId !== "") {
      obj.publicId = message.publicId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthData>, I>>(base?: I): AuthData {
    return AuthData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthData>, I>>(object: I): AuthData {
    const message = createBaseAuthData();
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    message.expiresIn = object.expiresIn ?? 0;
    message.publicId = object.publicId ?? "";
    return message;
  },
};

function createBaseHealthStatus(): HealthStatus {
  return { status: 0 };
}

export const HealthStatus = {
  encode(message: HealthStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HealthStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHealthStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HealthStatus {
    return { status: isSet(object.status) ? globalThis.Number(object.status) : 0 };
  },

  toJSON(message: HealthStatus): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<HealthStatus>, I>>(base?: I): HealthStatus {
    return HealthStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<HealthStatus>, I>>(object: I): HealthStatus {
    const message = createBaseHealthStatus();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseAuthResponse(): AuthResponse {
  return { data: undefined, error: undefined };
}

export const AuthResponse = {
  encode(message: AuthResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== undefined) {
      AuthData.encode(message.data, writer.uint32(10).fork()).ldelim();
    }
    if (message.error !== undefined) {
      BadData.encode(message.error, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AuthResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = AuthData.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.error = BadData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthResponse {
    return {
      data: isSet(object.data) ? AuthData.fromJSON(object.data) : undefined,
      error: isSet(object.error) ? BadData.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: AuthResponse): unknown {
    const obj: any = {};
    if (message.data !== undefined) {
      obj.data = AuthData.toJSON(message.data);
    }
    if (message.error !== undefined) {
      obj.error = BadData.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthResponse>, I>>(base?: I): AuthResponse {
    return AuthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthResponse>, I>>(object: I): AuthResponse {
    const message = createBaseAuthResponse();
    message.data = (object.data !== undefined && object.data !== null) ? AuthData.fromPartial(object.data) : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? BadData.fromPartial(object.error)
      : undefined;
    return message;
  },
};

/** Definição do serviço AuthService */
export interface AuthService {
  SignIn(request: SignInPayload): Promise<AuthResponse>;
  SignUp(request: SignUpPayload): Promise<AuthResponse>;
  /** Método de verificação de saúde */
  CheckHealth(request: Empty): Promise<HealthStatus>;
}

export const AuthServiceServiceName = "auth_service.AuthService";
export class AuthServiceClientImpl implements AuthService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AuthServiceServiceName;
    this.rpc = rpc;
    this.SignIn = this.SignIn.bind(this);
    this.SignUp = this.SignUp.bind(this);
    this.CheckHealth = this.CheckHealth.bind(this);
  }
  SignIn(request: SignInPayload): Promise<AuthResponse> {
    const data = SignInPayload.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignIn", data);
    return promise.then((data) => AuthResponse.decode(_m0.Reader.create(data)));
  }

  SignUp(request: SignUpPayload): Promise<AuthResponse> {
    const data = SignUpPayload.encode(request).finish();
    const promise = this.rpc.request(this.service, "SignUp", data);
    return promise.then((data) => AuthResponse.decode(_m0.Reader.create(data)));
  }

  CheckHealth(request: Empty): Promise<HealthStatus> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "CheckHealth", data);
    return promise.then((data) => HealthStatus.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
